apiVersion: v1
kind: Namespace
metadata:
  name: eclipse-che-images
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system:image-puller
  namespace: eclipse-che-images
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:image-puller
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: podman-basic
  namespace: eclipse-che-images
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: podman-kubedock
  namespace: eclipse-che-images
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: quarkus
  namespace: eclipse-che-images
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: podman-basic
  namespace: eclipse-che-images
spec:
  source:
    images:
      - from:
          kind: ImageStreamTag
          name: 'cli:latest'
          namespace: openshift
        paths:
        - destinationDir: .
          sourcePath: /usr/bin/oc
    dockerfile: |
      FROM registry.access.redhat.com/ubi9/ubi-minimal
      ARG USER_HOME_DIR="/home/user"
      ARG WORK_DIR="/projects"
      ENV HOME=\${USER_HOME_DIR}
      ENV BUILDAH_ISOLATION=chroot
      COPY oc /usr/bin/oc
      RUN microdnf --disableplugin=subscription-manager install -y openssl compat-openssl11 libbrotli git tar which shadow-utils bash zsh wget jq podman buildah skopeo; \
        microdnf update -y ; \
        microdnf clean all ; \
        mkdir -p \${USER_HOME_DIR} ; \
        mkdir -p \${WORK_DIR} ; \
        chgrp -R 0 /home ; \
        chgrp -R 0 \${WORK_DIR} ; \
        setcap cap_setuid+ep /usr/bin/newuidmap ; \
        setcap cap_setgid+ep /usr/bin/newgidmap ; \
        mkdir -p "\${HOME}"/.config/containers ; \
        (echo '[storage]';echo 'driver = "vfs"') > "\${HOME}"/.config/containers/storage.conf ; \
        touch /etc/subgid /etc/subuid ; \
        chmod -R g=u /etc/passwd /etc/group /etc/subuid /etc/subgid /home \${WORK_DIR} ; \
        echo user:20000:65536 > /etc/subuid  ; \
        echo user:20000:65536 > /etc/subgid
      USER 10001
      WORKDIR \${WORK_DIR}
  strategy:
    type: Docker
  output:
    to:
      kind: ImageStreamTag
      name: podman-basic:latest
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: podman-kubedock
  namespace: eclipse-che-images
spec:
  source:
    images:
      - from:
          kind: ImageStreamTag
          name: 'cli:latest'
          namespace: openshift
        paths:
        - destinationDir: .
          sourcePath: /usr/bin/oc
    dockerfile: |
      FROM registry.access.redhat.com/ubi9/ubi-minimal
      ARG USER_HOME_DIR="/home/user"
      ARG WORK_DIR="/projects"
      ARG KUBEDOCK_VERSION=0.9.2
      ENV HOME=\${USER_HOME_DIR}
      ENV BUILDAH_ISOLATION=chroot
      COPY oc /usr/bin/oc
      RUN microdnf --disableplugin=subscription-manager install -y openssl compat-openssl11 libbrotli git tar which shadow-utils bash zsh wget jq podman buildah skopeo; \
        microdnf update -y ; \
        microdnf clean all ; \
        mkdir -p \${USER_HOME_DIR} ; \
        mkdir -p \${WORK_DIR} ; \
        chgrp -R 0 /home ; \
        chgrp -R 0 \${WORK_DIR} ; \
        setcap cap_setuid+ep /usr/bin/newuidmap ; \
        setcap cap_setgid+ep /usr/bin/newgidmap ; \
        mkdir -p "\${HOME}"/.config/containers ; \
        (echo '[storage]';echo 'driver = "vfs"') > "\${HOME}"/.config/containers/storage.conf ; \
        touch /etc/subgid /etc/subuid ; \
        chmod -R g=u /etc/passwd /etc/group /etc/subuid /etc/subgid /home \${WORK_DIR} ; \
        echo user:20000:65536 > /etc/subuid  ; \
        echo user:20000:65536 > /etc/subgid ; \
        TEMP_DIR="$(mktemp -d)" ; \
        cd "${TEMP_DIR}"; \
        curl -fsSL -o kubedock.tgz https://github.com/joyrex2001/kubedock/releases/download/${KUBEDOCK_VERSION}/kubedock_${KUBEDOCK_VERSION}_linux_amd64.tar.gz ; \
        tar -xzf kubedock.tgz ; \
        cp kubedock /usr/local/bin ; \
        chmod +x /usr/local/bin/kubedock
      USER 10001
      WORKDIR \${WORK_DIR}
  strategy:
    type: Docker
  output:
    to:
      kind: ImageStreamTag
      name: podman-kubedock:latest
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: quarkus
  namespace: eclipse-che-images
spec:
  source:
    images:
      - from:
          kind: ImageStreamTag
          name: 'cli:latest'
          namespace: openshift
        paths:
        - destinationDir: .
          sourcePath: /usr/bin/oc
    dockerfile: |
      FROM registry.access.redhat.com/ubi9/ubi-minimal
      ARG USER_HOME_DIR="/home/user"
      ARG WORK_DIR="/projects"
      ARG MAVEN_VERSION=3.8.7
      ARG QUARKUS_VERSION=2.16.1.Final
      ARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries
      ARG JAVA_PACKAGE=java-17-openjdk-devel
      ARG MANDREL_VERSION=22.3.0.1-Final
      ARG USER_HOME_DIR="/home/user"
      ARG WORK_DIR="/projects"
      ARG GRAALVM_DIR=/opt/mandral
      ARG KUBEDOCK_VERSION=0.9.2
      ENV HOME=${USER_HOME_DIR}
      ENV BUILDAH_ISOLATION=chroot
      ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'
      ENV MAVEN_HOME=/usr/share/maven
      ENV MAVEN_CONFIG="${HOME}/.m2"
      ENV GRAALVM_HOME=${GRAALVM_DIR}
      ENV JAVA_HOME=/etc/alternatives/jre_17_openjdk
      COPY oc /usr/bin/oc
      RUN microdnf --disableplugin=subscription-manager install -y openssl compat-openssl11 libbrotli git tar gzip zip unzip which shadow-utils bash zsh wget jq podman buildah skopeo glibc-devel zlib-devel gcc libffi-devel libstdc++-devel gcc-c++ glibc-langpack-en ca-certificates ${JAVA_PACKAGE}; \
        microdnf update -y ; \
        microdnf clean all ; \
        mkdir -p ${USER_HOME_DIR} ; \
        mkdir -p ${WORK_DIR} ; \
        mkdir -p /usr/local/bin ; \
        setcap cap_setuid+ep /usr/bin/newuidmap ; \
        setcap cap_setgid+ep /usr/bin/newgidmap ; \
        mkdir -p "${HOME}"/.config/containers ; \
        (echo '[storage]';echo 'driver = "vfs"') > "${HOME}"/.config/containers/storage.conf ; \
        touch /etc/subgid /etc/subuid ; \
        chmod -R g=u /etc/passwd /etc/group /etc/subuid /etc/subgid ; \
        echo user:20000:65536 > /etc/subuid  ; \
        echo user:20000:65536 > /etc/subgid ; \
        TEMP_DIR="$(mktemp -d)" ; \
        mkdir -p /usr/share/maven /usr/share/maven/ref ; \
        curl -fsSL -o ${TEMP_DIR}/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz ; \
        tar -xzf ${TEMP_DIR}/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 ; \
        ln -s /usr/share/maven/bin/mvn /usr/bin/mvn ; \
        rm -rf "${TEMP_DIR}" ; \
        mkdir -p ${GRAALVM_DIR} ; \
        TEMP_DIR="$(mktemp -d)" ; \
        curl -fsSL -o ${TEMP_DIR}/mandrel-java11-linux-amd64-${MANDREL_VERSION}.tar.gz https://github.com/graalvm/mandrel/releases/download/mandrel-${MANDREL_VERSION}/mandrel-java17-linux-amd64-${MANDREL_VERSION}.tar.gz ; \
        tar xzf ${TEMP_DIR}/mandrel-java11-linux-amd64-${MANDREL_VERSION}.tar.gz -C ${GRAALVM_DIR} --strip-components=1 ; \
        rm -rf "${TEMP_DIR}" ; \
        TEMP_DIR="$(mktemp -d)" ; \
        cd "${TEMP_DIR}"; \
        GH_VERSION="2.0.0"; \
        GH_ARCH="linux_amd64"; \
        GH_TGZ="gh_${GH_VERSION}_${GH_ARCH}.tar.gz"; \
        GH_TGZ_URL="https://github.com/cli/cli/releases/download/v${GH_VERSION}/${GH_TGZ}"; \
        GH_CHEKSUMS_URL="https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_checksums.txt"; \
        curl -sSLO "${GH_TGZ_URL}"; \
        curl -sSLO "${GH_CHEKSUMS_URL}"; \
        sha256sum --ignore-missing -c "gh_${GH_VERSION}_checksums.txt" 2>&1 | grep OK; \
        tar -zxvf "${GH_TGZ}"; \
        mv "gh_${GH_VERSION}_${GH_ARCH}"/bin/gh /usr/local/bin/; \
        cd -; \
        rm -rf "${TEMP_DIR}" ; \
        TEMP_DIR="$(mktemp -d)" ; \
        YQ_VER="$(basename $(curl -Ls -o /dev/null -w %{url_effective} https://github.com/mikefarah/yq/releases/latest))" ; \
        curl -fsSL -o ${TEMP_DIR}/yq.tar.gz https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_amd64.tar.gz ; \
        tar -xzf ${TEMP_DIR}/yq.tar.gz -C ${TEMP_DIR} ; \
        cp ${TEMP_DIR}/yq_linux_amd64 /usr/local/bin/yq ; \
        chmod +x /usr/local/bin/yq ; \
        rm -rf "${TEMP_DIR}" ; \
        mkdir -p /usr/local/quarkus-cli/lib ; \
        mkdir /usr/local/quarkus-cli/bin ; \
        TEMP_DIR="$(mktemp -d)" ; \
        curl -fsSL -o ${TEMP_DIR}/quarkus-cli.tgz https://github.com/quarkusio/quarkus/releases/download/${QUARKUS_VERSION}/quarkus-cli-${QUARKUS_VERSION}.tar.gz ; \
        tar -xzf ${TEMP_DIR}/quarkus-cli.tgz -C ${TEMP_DIR} ; \
        cp ${TEMP_DIR}/quarkus-cli-${QUARKUS_VERSION}/bin/quarkus /usr/local/quarkus-cli/bin ; \
        cp ${TEMP_DIR}/quarkus-cli-${QUARKUS_VERSION}/lib/quarkus-cli-${QUARKUS_VERSION}-runner.jar /usr/local/quarkus-cli/lib ; \
        rm -rf "${TEMP_DIR}" ; \
        chmod +x /usr/local/quarkus-cli/bin/quarkus ; \
        ln -s /usr/local/quarkus-cli/bin/quarkus /usr/local/bin/quarkus ; \
        TEMP_DIR="$(mktemp -d)" ; \
        cd "${TEMP_DIR}"; \
        curl -fsSL -o kubedock.tgz https://github.com/joyrex2001/kubedock/releases/download/${KUBEDOCK_VERSION}/kubedock_${KUBEDOCK_VERSION}_linux_amd64.tar.gz ; \
        tar -xzf kubedock.tgz ; \
        cp kubedock /usr/local/bin ; \
        chmod +x /usr/local/bin/kubedock ; \
        rm -rf "${TEMP_DIR}" ; \
        chgrp -R 0 /home ; \
        chmod -R g=u /home ${WORK_DIR}
      USER 10001
      WORKDIR ${WORK_DIR}
  strategy:
    type: Docker
  output:
    to:
      kind: ImageStreamTag
      name: quarkus:latest
